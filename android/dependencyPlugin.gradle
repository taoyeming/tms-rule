import groovy.json.JsonSlurper

class ReactNativeDependencyModules {
    private Logger logger
    private String packageName
    private File root

//    private Map<String, Object> TMSConfig
    private HashMap<String, Object> NConfig
    private HashMap<String, Object>  TMSConfig
    private HashMap<String, Object>  modules

    private String  config


    private static String LOG_PREFIX = ":ReactNativeDependency:"

    ReactNativeDependencyModules(Logger logger, File root) {
        this.logger = logger
        this.root = root
        this.packageName = "rn"
        this.config = this.getRNTMSConfig()
    }


    /**
     * Adds the react native modules as dependencies to the users `app` project
     */
    void addReactNativeModuleDependencies(Project appProject) {
        reactNativeModules.forEach { reactNativeModule ->
            def nameCleansed = reactNativeModule["nameCleansed"]
            appProject.dependencies {
                // TODO(salakar): are other dependency scope methods such as `api` required?
                implementation project(path: ":${nameCleansed}")
            }
        }
    }
 

    /**
     * Runs a specified command using Runtime exec() in a specified directory.
     * Throws when the command result is empty.
     */
    String getCommandOutput(String[] command, File directory) {
        try {
            def output = ""
            def cmdProcess = Runtime.getRuntime().exec(command, null, directory)
            def bufferedReader = new BufferedReader(new InputStreamReader(cmdProcess.getInputStream()))
            def buff = ""
            def readBuffer = new StringBuffer()
            while ((buff = bufferedReader.readLine()) != null) {

                readBuffer.append(buff)
            }
            output = readBuffer.toString()

            if (!output) {
                this.logger.error("${LOG_PREFIX}Unexpected empty result of running '${command}' command.")
                def bufferedErrorReader = new BufferedReader(new InputStreamReader(cmdProcess.getErrorStream()))
                def errBuff = ""
                def readErrorBuffer = new StringBuffer()
                while ((errBuff = bufferedErrorReader.readLine()) != null) {
                    readErrorBuffer.append(errBuff)
                }
                throw new Exception(readErrorBuffer.toString())
            }
            return output
        } catch (Exception exception) {
            this.logger.error("${LOG_PREFIX}Running '${command}' command failed.")
            throw exception
        }
    }


    ArrayList<String> getDirPaths() {

        ArrayList<HashMap<String, String>> reactNativeModules = new ArrayList<HashMap<String, String>>()

        def cliResolveScript = "console.log(require('@terminus/react-native-tms').bin);"
        String[] nodeCommand = ["node", "-e", cliResolveScript]
        def cliPath = this.getCommandOutput(nodeCommand, this.root)

        String[] reactNativeConfigCommand = ["node", cliPath, "config"]
        def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand, this.root)
        def json
        try {
          json = new JsonSlurper().parseText(reactNativeConfigOutput)
          json = new JsonSlurper().parseText(json)
        } catch (Exception exception) {
          throw new Exception("Calling `${reactNativeConfigCommand}` finished with an exception. Error message: ${exception.toString()}. Output: ${reactNativeConfigOutput}");
        }


        return json["nconfig"]["dirs"] 

    }

    String getRNTMSConfig() {

        def cliResolveScript = "console.log(require('@terminus/react-native-tms').bin);"
        String[] nodeCommand = ["node", "-e", cliResolveScript]
        def cliPath = this.getCommandOutput(nodeCommand, this.root)

        String[] reactNativeConfigCommand = ["node", cliPath, "androidConfig"]
        def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand, this.root)

        return reactNativeConfigOutput.toString();
    }
}


def projectRoot = rootProject.projectDir

def autoModules = new ReactNativeDependencyModules(logger, projectRoot)

/** -----------------------
 *    Exported Extensions
 * ------------------------ */

ext.applyNativeModulesAppBuildGradle = { Project project ->


//  autoModules.addReactNativeModuleDependencies(project)

    def generatedSrcDir = new File(buildDir, "generated/rncli/src/main/java")

    def tms =  autoModules.getRNTMSConfig()
    def dirPath =  autoModules.getDirPaths()


    android {
        defaultConfig {
            buildConfigField "String" , "tmsConfig" , tms
        }

        // repositories{
        //     flatDir{
        //       dirs dirPath
        //     }
        // }

        sourceSets {
            main {
                java {
                    srcDirs += generatedSrcDir
                }
            }
        }
    }
}
